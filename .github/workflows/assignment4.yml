name: assignment4

on:
  workflow_dispatch:

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Initialize Log File
        run: |
          touch log.txt
          echo "$(date -Iminutes)" > log.txt
          echo "Liraz Gabbay, Noa Erben" >> log.txt

      - name: Build Docker Images
        run: |
          set +e
          docker build -t stocks-service -f ./stocks/Dockerfile .
          STATUS1=$?
          docker build -t capital-gains-service -f ./capital-gains/Dockerfile .
          STATUS2=$?
          if [ $STATUS1 -eq 0 ] && [ $STATUS2 -eq 0 ]; then
              echo "image successfully built" >> log.txt
              # Save images as tar files
              docker save stocks-service > stocks-service.tar
              docker save capital-gains-service > capital-gains-service.tar
          else
              echo "image not able to be built" >> log.txt
              exit 1
          fi
          set -e
  
      - name: Upload Docker images
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            stocks-service.tar
            capital-gains-service.tar

      - name: Upload Log File
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log_file
          path: log.txt

      - name: Prepare Test Results File
        run: touch assn4_test_results.txt

      - name: Upload Empty Test Results (if build fails)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: pytest_results_build
          path: assn4_test_results.txt

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download log file from build job
        uses: actions/download-artifact@v4
        with:
          name: log-file
          path: .

      - name: Download Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: .
      
      - name: Load Docker images
        run: |
          docker load < stocks-service.tar
          docker load < capital-gains-service.tar

      - name: Start Application
        run: docker compose up -d
      
      - name: Sleep
        run: sleep 15
        
      - name: Verify Running Containers
        if: always()
        run: |
          EXPECTED_CONTAINERS=3
          RUNNING_CONTAINERS=$(docker ps --format '{{.Names}}' | wc -l)
          if [ "$RUNNING_CONTAINERS" -eq "$EXPECTED_CONTAINERS" ]; then
              echo "Container up and running" >> log.txt
          else
              echo "Container failed to run" >> log.txt
          fi

      - name: Install Dependencies
        run: pip install pytest requests

      - name: Run Pytest
        run: |
          pytest -v tests/assn4_tests.py | tee assn4_test_results.txt || true

      - name: Log Test Results
        run: |
          if grep -q "FAILED" assn4_test_results.txt; then
            echo "tests failed" >> log.txt
          else
            echo "tests succeeded" >> log.txt
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest_results_test
          path: assn4_test_results.txt

      - name: Upload Log File
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log_file
          path: log.txt

  query:
    name: Run Query Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Start Application
        run: docker compose up -d
      
      - name: Sleep
        run: sleep 15

      - name: Post six stocks
        run: |
          curl -X POST http://localhost:5001/stocks -H "Content-Type: application/json" -d '{"name": "NVIDIA Corporation", "symbol": "NVDA", "purchase price": 134.66, "purchase date": "18-06-2024", "shares": 7}'
          curl -X POST http://localhost:5001/stocks -H "Content-Type: application/json" -d '{"name": "Apple Inc.", "symbol": "AAPL", "purchase price": 183.63, "purchase date": "22-02-2024", "shares": 19}'
          curl -X POST http://localhost:5001/stocks -H "Content-Type: application/json" -d '{"name": "Alphabet Inc.", "symbol": "GOOG", "purchase price": 140.12, "purchase date": "24-10-2024", "shares": 14}'
          curl -X POST http://localhost:5001/stocks -H "Content-Type: application/json" -d '{"name": "Tesla, Inc.", "symbol": "TSLA", "purchase price": 194.58, "purchase date": "28-11-2022", "shares": 32}'
          curl -X POST http://localhost:5001/stocks -H "Content-Type: application/json" -d '{"name": "Microsoft Corporation", "symbol": "MSFT", "purchase price": 420.55, "purchase date": "09-02-2024", "shares": 35}'
          curl -X POST http://localhost:5001/stocks -H "Content-Type: application/json" -d '{"name": "Intel Corporation", "symbol": "INTC", "purchase price": 19.15, "purchase date": "13-01-2025", "shares": 10}'

      - name: Execute Queries from query.txt
        run: |
          touch response.txt
          while IFS= read -r line; do
            SERVICE=$(echo "$line" | cut -d':' -f1)
            QUERY=$(echo "$line" | cut -d':' -f2- | sed 's/ /%20/g')
            
            echo "query: ${SERVICE}:${QUERY}" >> response.txt

            if [[ "$SERVICE" == "stocks" ]]; then
              RESPONSE=$(curl -s "http://localhost:5001/stocks?$QUERY")
            elif [[ "$SERVICE" == "capital-gains" ]]; then
              RESPONSE=$(curl -s "http://localhost:5003/capital-gains?$QUERY")
            fi

            printf "response: %s\n" "$RESPONSE" >> response.txt
          done < query.txt


      - name: Upload Query Responses
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: query_responses
          path: response.txt
