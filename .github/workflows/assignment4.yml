name: assignment4

on:
  workflow_dispatch:

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Initialize Log File
        run: |
          touch log.txt
          echo "$(date -Iminutes)" > log.txt
          echo "Liraz Gabbay, Noa Erben" >> log.txt

      - name: Build Docker Images
        run: |
          set +e
          docker build -t stocks-service -f ./stocks/Dockerfile .
          STATUS1=$?
          docker build -t capital-gains-service -f ./capital-gains/Dockerfile .
          STATUS2=$?
          set -e
          if [ $STATUS1 -eq 0 ] && [ $STATUS2 -eq 0 ]; then
              echo "image successfully built" >> log.txt
          else
              echo "image not able to be built" >> log.txt
          fi

      - name: Upload Log File
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log_file_build
          path: log.txt

      - name: Prepare Test Results File
        run: touch assn4_test_results.txt

      - name: Upload Empty Test Results (if build fails)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: pytest_results_build
          path: assn4_test_results.txt

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Log File
        uses: actions/download-artifact@v4
        with:
          name: log_file_build
          path: .

      - name: Start Application
        run: docker compose up -d
      
      - name: Sleep
        run: sleep 15
        
      - name: Verify Running Containers
        run: |
          EXPECTED_CONTAINERS=3
          RUNNING_CONTAINERS=$(docker ps --format '{{.Names}}' | wc -l)
          if [ "$RUNNING_CONTAINERS" -eq "$EXPECTED_CONTAINERS" ]; then
              echo "All expected containers are running" >> log.txt
          else
              echo "Expected $EXPECTED_CONTAINERS containers, but found $RUNNING_CONTAINERS" >> log.txt
          fi

      - name: Install Dependencies
        run: pip install pytest requests

      - name: Run Pytest
        run: |
          pytest -v tests/assn4_tests.py | tee assn4_test_results.txt || true

      - name: Log Test Results
        run: |
          if grep -q "FAILED" assn4_test_results.txt; then
            echo "tests failed" >> log.txt
          else
            echo "tests succeeded" >> log.txt
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest_results_test
          path: assn4_test_results.txt

      - name: Upload Log File
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log_file_test
          path: log.txt

  query:
    name: Run Query Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Start Application
        run: docker compose up -d
      
      - name: Sleep
        run: sleep 15

      - name: Execute Queries from query.txt
        run: |
          touch response.txt
          while IFS= read -r line; do
            SERVICE=$(echo "$line" | cut -d':' -f1)
            QUERY=$(echo "$line" | cut -d':' -f2-)
            echo "query: ${SERVICE}:${QUERY}" >> response.txt
            echo "response:" >> response.txt
            if [[ "$SERVICE" == "stocks" ]]; then
              curl -s "http://localhost:5001/stocks?$QUERY" >> response.txt
            elif [[ "$SERVICE" == "capital-gains" ]]; then
              curl -s "http://localhost:5003/capital-gains?$QUERY" >> response.txt
            fi
          done < query.txt

      - name: Upload Query Responses
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: query_responses
          path: response.txt
